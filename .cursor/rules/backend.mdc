---
description: 
globs: 
alwaysApply: true
---
Advanced Ray Tracing Engine Practices
Analytic shortcuts: For weak-field regions (far from the BH), approximate lensing analytically to reduce integration time. For example, use small-angle approximations or precomputed deflection tables for rays with large impact parameter. Only trigger full ODE integration within a threshold radius.
Conserved quantities and symmetries: Exploit known constants of motion. If ray initial conditions lie in a symmetry plane, reduce the 3D problem to 2D. Precompute and use conserved energy, angular momentum, and Carter constant to limit integration. This can shorten integration (e.g. solve radial part analytically for certain cases).
Code-level optimizations: Profile hotspots (e.g. computing Christoffel symbols). Inline small functions and reuse temporaries. Use compiler vectorization (Eigen or glm for linear algebra). Unroll loops over coordinates if beneficial. Avoid expensive functions (sqrt, trig) by using approximations or precomputing them when possible.
Sampling strategy: Use adaptive pixel sampling: allocate more rays to pixels with higher variance or steep gradients (detected via low-res color differences). This is akin to adaptive anti-aliasing. It focuses effort where the visual error is largest.
Progressive refinement control: Implement a quick, low-precision preview (possibly with lower order integrator or fixed step) to help guide where to refine. After the coarse pass, refine only selected pixels or sub-regions.
Portability hints: To make code WebAssembly/WebGPU-ready, avoid OS-specific calls and heavy C++ STL use. Structure the integrator logic in plain loops (no recursion) so it can compile to GPU shader languages. Use linear algebra libraries that support GLSL/HLSL/WGSL translations. Maintain a clean separation between CPU-side setup and GPU-side compute so the core ODE solver can be ported into a compute shader with minimal changes.